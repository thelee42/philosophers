
parsing_1.c

void    parse_non_operator(char *str, int *i, t_token **tokens, t_ctx *ctx);
void    parse_operator(char *str, int *i, t_token **tokens, t_ctx *ctx);
t_token *tokenize(char *str, t_ctx *ctx);


parsing_2.c

char    *str_quote(char *str, int *i, char *quote);
char    *str_non_quote(char *str, int *i, char *quote);
char    *parse_str(char *str, int *i, char *quote);
void    *parsing_token(char *str, t_token **tokens);
void    add_token_tokenize(t_token **head, char *value);

parsing_expand.c

char    *expand_env_var(char *str, int *i, t_ctx *ctx);
char    *expand_special_var(char *str, int *i, t_ctx *ctx);
char    *parsing_dollars(char *str, int *i, t_token **tokens, t_ctx *ctx);
char    *parsing_non_dollars(char *str, int *i, int start);
char    *expand_var(char *str, t_token **tokens, t_ctx *ctx);

parsing_utils.c

char    *add_line(char *s1, char *s2);
char    *ft_strndup_thea(char *s, int n);
int is_operator(char c);
int quote_check(char *str, int i, char quote);
char    *search_env(t_env_var *env, char *name);

parsing_utils2.c

int is_delimiteur(t_token **tokens);
int check_syntax(t_token *tokens);
int is_quote(char c);